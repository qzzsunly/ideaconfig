/**
 * 页面表单通用指令。
 */
var directive = angular.module("formDirective", [ "base" ])
/**
 * 校验指令. 用法： <input type="text" ng-model="user.name"
 * ht-validate="{require:true}" />
 * 
 * 具体的规则： /js/common/CustomValid.js 的rules 内置规则。
 */
.directive('htValidate', [ function() {
	return {
		require : "ngModel",
		link : function(scope, element, attr, ctrl) {
			var validate = attr.htValidate;

			var validateJson = eval('(' + validate + ')');

			var customValidator = function(value) {
				if (!validate)
					return true;
				handlTargetValue(validateJson);
				var validity = $.fn.validRules(value, validateJson, element);
				ctrl.$setValidity("customValidate", validity);
				return validity ? value : undefined;
			};

			ctrl.$formatters.push(customValidator);
			ctrl.$parsers.push(customValidator);

			// 获取比较目标字段的值。 所有比较的都包含target对象eg:{eq:{target:data.mian.name}}
			var handlTargetValue = function(validateJson) {
				for (key in validateJson) {
					if (validateJson[key].target) {
						validateJson[key].targetVal = eval("scope." + dateRange.target);
					}
				}
			}
		}
	};
} ])
/**
 * 表单的常用保存指令，看例子说话： 
 * <input type="button" ng-model="data" ht-save="bOEnt/save"/>
 * 
 * ps:<form name ="form">元素必须是 name ="form"
 * 
 * 参数介绍： ng-model :代表保存对象 ht-save :是保存的url地址
 * 
 * 后台controller： 可以参照 BOEntController.save方法
 * 
 * 页面controller(ngjs的控制层): 我们可以捕获保存后抛出的事件进行个性化操作（也可以不捕获）
 * eg:
 * $scope.$on("afterSaveEvent",function(event,data){
 * console.info("我捕获了afterSaveEvent事件"); console.info(data); });
 * data.r是选择的"是"true 和 "否"false
 * beforeSaveEvent一样
 */
.directive('htSave', [ 'baseService', function(baseService) {
	return {
		require : "ngModel",
		link : function(scope, element, attr, ctrl) {
			element.on("click", function() {
				if (!scope.form.$valid) return;
				
				var configObj={};
				//读取配置。
				var config=attr.config;
				if(config){
					configObj=angular.fromJson(config);
				}
				
				var data={};//数据
				data.pass = true;//前置事件用来控制能否提交的参数
				scope.$root.$broadcast('beforeSaveEvent',data);
				// 表单验证
				if (!data.pass) return;
				
				var postData=scope[attr.ngModel];
				
				var rtn = baseService.post(attr.htSave, postData);
				rtn.then(function(data) {
					if (data.result == 1) {
						data.postData=postData;
						//如果设置了配置。
						if(configObj.afterSave){
							eval("scope." +configObj.afterSave +"(data)" );
							return;
						}
						
						$.topCall.confirm(data.title?data.title:"操作成功",data.message+",是否继续操作", function(r) {
							data.r=r;
							// 发布保存事件用于给用户自定义操作
							scope.$root.$broadcast('afterSaveEvent', data);
						});
					} else {
						$.topCall.confirm(data.message, data.cause);
					}
				}, function(status) {
					$.topCall.error("请求失败");
				});
			});
		}
	};
} ])
/**
 * 表单的常用初始化数据指令，看例子说话： 
 * <form name="form"  ht-load="bOEnt/getObject?id=${param.id}" ng-model="data"></form>
 * ps:当初始化对象为空时不作任何操作的 参数介绍： ht-load ：能返回一个对象的请求后台地址 
 * ng-model :把获取的对象赋值到该对象
 * 
 * 后台controller： 可以参照 BOEntController.getObject方法
 * 
 * 页面controller(ngjs的控制层): 我们可以捕获初始化数据后抛出的事件进行个性化操作（也可以不捕获）eg:
 * $scope.$on("afterLoadEvent",function(event,data){
 * console.info("我捕获了afterLoadEvent事件"); console.info(data); });
 */
.directive('htLoad', [ 'baseService', function(baseService) {
	return {
		require : "ngModel",
		link : function(scope, element, attr, ctrl) {
			if (!attr.htLoad || attr.htLoad == "") {
				return;
			}
			var rtn = baseService.post(attr.htLoad);
			rtn.then(function(data, status) {
				if (!data) return;
				
				scope[attr.ngModel] = data;
				scope.$root.$broadcast('afterLoadEvent', data);// 发布加载事件用于给用户自定义操作
			}, function(status) {
				$.topCall.error("请求失败");
			});
		}
	};
} ])
/**
 * 数据源下拉框选择，
 * eg <div ht-ds-selector="data.dsName"></div> 会把选择的别名返回到指定对象中
 */
.directive('htDsSelector', [ 'baseService', function(baseService) {
	return {
		scope : {
			htDsSelector : "=",
			ngDisabled:"="
		},
		link : function(scope, element, attr, ctrl) {
			var rtn = baseService.post(__ctx + '/system/sysDataSource/getDataSourcesInBean');
			rtn.then(function(data) {
				scope.dataSourcesInBean = data;
			}, function(status) {
				$.topCall.error("请求失败");
			});
		},
		template : '<select class="inputText" ng-model="htDsSelector" ' +
			' ng-options="m.alias as m.name for m in dataSourcesInBean"></select>',
		replace : true
	};
} ])
/**
 * ht-select-ajax 动态加载select的options数据 
 * 例如： 
 * <select ng-model="form.typeId"  ng-options="(m.id) as m.text for m in formTypeList"
 * 	ht-select-ajax="{url:'${ctx}/platform/system/sysType/getByGroupKey.ht?groupKey=FORM_TYPE',field:'formTypeList'}">
 * <option value="">请选择</option> 
 * </select> 
 * 传入参数 url ： 请求地址 
 * field ： formTypeList
 * 对应于 ng-options 中的 formTypeList （两者必须相同）
 */
.directive('htSelectAjax', function($injector) {
	return {
		restrict : 'A',
		require :'?ngModel',
		link : function(scope, element, attrs,ctrl) {
			var baseService = $injector.get("baseService");
			var option = attrs["htSelectAjax"];
			option = eval("(" + option + ")");
			if (scope.$root.$$childHead[option.field])
				return;
			var def = baseService.get(option.url);
			def.then(function(data) {
				if (option.dataRoot) {
					data = data[option.dataRoot];
				}
				scope[option.field] = data;
				scope.$root.$$childHead[option.field] = scope[option.field];
				// select option 生成后，让控件从新更新视图
				window.setTimeout(function(){
					ctrl.$render();
				},10)
			}, function() {
			});
		}
	};
})
/**
 * 汉字转拼音，例如 A 填写了 你好，当A失去焦点时，B自动填充为nh fullpinyin:1 全拼，不填0默认首字母 
 * eg: 
 * <input  type="text" ng-model="chinese" value=汉字/> 
 * <input type="text" ng-model="pingyin"  ht-pinyin="chinese" type="0" fullpinyin="1"/>
 */
.directive('htPinyin', [ 'baseService', function(baseService) {
	return {
		restrict : 'A',
		require : "ngModel",
		scope : {
			ngModel : "="
		},
		link : function(scope, elm, attrs) {
			var type = attrs.fullpinyin || 0;
			var wordcase=attrs.wordcase;
			// 利用jq方法绑定失去焦点事件
			$("[ng-model='" + attrs.htPinyin + "']", elm.parent().closest(".ng-scope")).blur(function() {
				if (elm.val()) return;
				
				var obj = $(this);

				var value = obj.val();
				if (!value) return;

				var param = { Chinese : value, type : type };
				var rtn = baseService.postForm(__ctx + "/pinyinServlet", param);
				rtn.then(function(data) {
					if(wordcase=="upper"){
						scope.ngModel = data.toUpperCase();
					}
					else 
						scope.ngModel = data;
					//延迟触发blur,ngModel 还未将值设置进input
					window.setTimeout(function(){
						elm.trigger("blur");
					},100);
				}, function(errorCode) {
				});
			});
		}
	};
} ])
/**
 * 富文本框指令：
 * <ht-editor config="editorConfig" ng-model="content" height="100"></ht-editor>
 * ng-model：scope 数据表达式
 * config:编辑器配置
 * height:文本框高度
 * 
 * 使用方法：
 * 
 * <body ng-controller="ctrl">
 *	<div config="editorConfig" ht-editor ng-model="content1" style="width: 80%">测试</div>
 *	<script>
 *		angular.module('example',['formDirective']).controller('ctrl', function ($scope,$sce) {
 *    		$scope.content1="hello world";
 * 		});
 *  </script>
 * </body>
 */
.directive('htEditor', function() {
	return {
		restrict : 'AE',
		transclude : true,
		template : '',
		require : '?ngModel',
		scope : {
			config : '='
		},
		link : function(scope, element, attrs, ngModel) {
			var editor = new UE.ui.Editor(scope.config || {
				focus : true,
				toolbars : [ [ 'source', 'undo', 'redo', 'bold', 'italic', 'removeformat', 'formatmatch', 'autotypeset', 'blockquote', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist' ] ],
				initialFrameHeight : attrs.height || 150
			});
			editor.render(element[0]);
			if (ngModel) {
				// Model数据更新时，更新百度UEditor
				ngModel.$render = function() {
					try {
						editor.setContent(ngModel.$viewValue);
					} catch (e) {
					}
				};
				// 设置内容。
				editor.ready(function() {
					editor.setContent(ngModel.$viewValue);
				});
				// 百度UEditor数据更新时，更新Model
				editor.addListener('contentChange', function() {
					setTimeout(function() {
						scope.$apply(function() {
							ngModel.$setViewValue(editor.getContent());
						})
					}, 0);
				});
			}

		}
	}
})
/**
 * 功能说明:
 * htCheckbox 指令用于收集checkbox数据。
 * 在页面中使用 
 * 	属性指令：ht-checkbox
 * 	对应的值为scope对应的数据data.users。
 * 示例:
  	<div >
        <input type="checkbox" ht-checkbox ng-model="data.users"  value="1" />红
		<input type="checkbox" ht-checkbox ng-model="data.users"   value="2" />绿
		<input type="checkbox" ht-checkbox ng-model="data.users"   value="3" />蓝
		<span>{{data.users}}</span>
   </div>
   <script>
       var app=angular.module("app",["directive"]);
		app.controller('ctrl', ['$scope',function($scope){
			$scope.data={users:"1,2"};
			$scope.getData=function(){
				console.info($scope.data.users)
			}
		}])
    </script>
 */
.directive('htCheckbox', [ function() {
	return {
		restrict : 'A',
		require : "ngModel",
		link : function(scope, element, attrs, ctrl) {
			var checkValue = attrs.value;
			
			//modelValue转viewValue的过程
			ctrl.$formatters.push(function(value) {
				if (!value) return false;
				
				var valueArr = value.split(",");
				if (valueArr.indexOf(checkValue) == -1) return false;
				
				return true;
			});
			
			//viewValue转modelValue的过程
			ctrl.$parsers.push(function(value){
				var valueArr = [];
				if(ctrl.$modelValue){
					valueArr = ctrl.$modelValue.split(",");
				}
				var index = valueArr.indexOf(checkValue);
				if (value) {
					// 如果checked modelValue 不含当前value
					if (index == -1) valueArr.push(checkValue);
				} else {
					if (index != -1) valueArr.splice(index, 1);
				}
				
				return valueArr.join(",");
			});
		}
	}
}])
/**
 * 在对象上显示提示框。 使用方法: <div class="flowNode"
 * ht-tip="{content:getMenuContent,alignX:'center',alignY:'bottom',offsetY:10}" ></div>
 */
.directive('htTip', function($injector) {
	return {
		restrict : 'A',
		scope : {
			htTip : "="
		},
		link : function(scope, element, attrs) {
			var defaultSetting = {
				hide : {
					event : 'mouseleave',
					leave : false,
					fixed : true,
					delay : 100
				},
				style : {
					classes : 'qtip-default  qtip qtip-bootstrap qtip-shadow'
				}
			};
			var setting = angular.extend(scope.htTip || {}, defaultSetting);
			element.qtip(setting);
		}
	};
})

/**
 * 列表全选指令，这个指令用于 ng-repeat 列表全选，反选。 指令的用法： 在列表项checkbox控件上增加指令
 * ht-checked="selectAll",属性值为全选checkbox的 ng-model属性。 
 * eg: <input type="checkbox"  ng-model="selectAll"/>
 * 
 * <tr  ng-repeat="item in data.defNameJson  track by $index">
 * <td> <input ng-model="item.selected" type="checkbox" ht-checked="selectAll">
 * </td>
 * </tr>
 * 
 */
.directive('htChecked', function() {
	return {
		restrict : 'A',
		require : "ngModel",
		scope : {
			ngModel : "="
		},
		link : function(scope, elm, attrs, ctrl) {
			scope.$parent.$watch(attrs.htChecked, function(newValue, oldValue) {
				if (newValue == undefined)
					return;
				ctrl.$setViewValue(newValue);
				ctrl.$render();
			});
		}
	};
})
/**
 * eg:	
 * <span ht-ztree="services" child-key="soapBindingOperationInfos" 
 * callback="{onDblClick:onOperationDbClick,onClick:onSingleClick}"></span>
 * @说明 默认为simpleData模式。数据格式为list 配置id，pid的key，当然我们系统默认是匹配的。
 * @dataKey:{idKey:"idKEY名称",pIdKey:"",name:"显示名称",title,rootPid}
 * idKey 默认 id ； pIdKey 默认 parentId ；name 默认 name；title 默认 name
 * 
 * @callback:{beforeClick：beforeClick,onClick:onClick,beforeCheck:beforeCheck}
 * @setCheckbox="" or { "Y": "p", "N": "s" }
 * @childKey 默认children 或者设置
 * @expandLevel="number" 展开层级
 * @url:"" 远程调用的情况。默认直接获取htZtree 的数据
 * @param:eg {name:data.name}; 远程调用提供的参数
 */
.directive('htZtree',['baseService',function(baseService) {
    return {
        restrict: 'A',
        scope:{
        	htZtree:"=",
        	callback:"="
        },
        link: function(scope, element, attrs) {
        	element.addClass("ztree");
        	if(!element.prop("id")) {
        		element.prop("id",Math.random().toString(36).substring(2, 15));
        	}
        	var param = attrs.param ?  eval('(' + attrs.param + ')') : {};
        	var dataKey=attrs.dataKey? eval('(' + attrs.dataKey + ')'):{};
        	
        	scope._setting = {
        			data: {
        				key:{
        					name: dataKey.name || "name",
        					title:  dataKey.title || "name"
        				},
        				simpleData: {
        					enable: true,
        					idKey: dataKey.idKey || "id",
        					pIdKey: dataKey.pIdKey || "parentId",
        					rootPId: dataKey.rootPid || 0
        				}
        			},
        			async: {enable: false},
        			edit: {
        					drag: {isCopy:true},
        					enable: true,
        					showRemoveBtn: false,
        					showRenameBtn: false
        				},
        			view:{
        				nameIsHTML: true,
        				selectedMulti: true,
        				showIconFont:true,
        			    showIcon: null
        			},
        			check: {
        				enable: false,
        				chkboxType: { "Y": "", "N": "" }
        			},
        			callback: scope.callback ||{}
        		}
        	
        	if(attrs.childKey!=undefined){
        		scope._setting.data.simpleData.enable = false;
        		scope._setting.data.key.children =attrs.childKey||"children";
        	} 
        	if(attrs.setCheckbox != undefined ){
        		scope._setting.check.enable = true;
        		if(attrs.setCheckbox){
        			scope._setting.check.chkboxType=eval('(' + attrs.setCheckbox + ')');
        		}
        	}
        	
        	if(attrs.url){
        		$.post(url,param,function(result){
        			if(Object.prototype.toString.call(result) === "[object String]") result =eval('(' + result + ')');
        			initTree(result);
        		});
        		
        	}
        	else{
        		scope.$watch("htZtree",function(newVal,oldVal){
            		if(newVal!==oldVal){
            			initTree(newVal); 
            		}
            	},true);
        	}
        	
        	
        	function initTree(data){
        		var _treeObj = $.fn.zTree.init(element,scope._setting,data);
        		
        		if(attrs.expandLevel){
        			_treeObj.expandAll(false);
        			expandTree(_treeObj,_treeObj.getNodes(),attrs.expandLevel);
        		}
        		else{
        			_treeObj.expandAll(true);
    			}
        	}
        	
        }
    };
}])
/**
 *日期控件。
 *控件用法：
 *<input type="text" ht-date="yyyy-MM-dd HH:mm:00" ng-model="date1" />
 *<input type="text" ht-date ng-model="date1" />
 *需要增加：ht-date 指令。
 * ht-date="yyyy-MM-dd HH:mm:ss"
 * 属性为日期格式。
 */
.directive('htDate', function() {
	var link = function(scope, element, attrs, $ctrl) {
		element.addClass("dateformat");
		var format=attrs.htDate || "yyyy-MM-dd";
		$ctrl.$formatters.push(function(value) {
			if(value){
				return new Date(value).format(format);
			}
		});
		return;
	};
	return {
		restrict : 'A',
		require : "ngModel",
		compile : function() {
			return link;
		}
	};
})
/**
 * @ht-boolean 可为空， 格式以“/”分割truevalue 和falsevalue  
 * @text 按钮名字 （可以通过/分割则为trueName/falseName）  
 * <span  ht-boolean="Y/N" class="checkbox disabled" text="测试按钮" ng-model="prop.skipFirstNode" ht-tip title="我是按钮的提示"></span>
 */
.directive('htBoolean', function() {
	return {
		restrict : 'A',
		require:'ngModel',
		scope : true,
		link : function(scope, element, attrs,ctrl) {
			var booleanConf =attrs.htBoolean;
			var textArr = attrs.text.split("/");
			scope.trueText = textArr[0];
			scope.falseText =textArr.length==2?textArr[1]:textArr[0];
			if(booleanConf)	{
				booleanConf=booleanConf.split("/");
			}
			else {
				booleanConf = [true,false];
			}
			
			var trueValue = booleanConf[0],falseValue = booleanConf[1];
			
			ctrl.$formatters.push(function(value){
				if(typeof(value)== 'number')value =""+value;
				return value === trueValue;
			});
			
            ctrl.$parsers.push(function(value){
            	return value ? trueValue : falseValue; 
            });
            
            ctrl.$render = function(){
                scope.checked = ctrl.$viewValue;
            };
            
            element.on('click', function(){
            	if($(this).attr("disabled"))return ; 
                scope.$apply(function() {
                  scope.checked = !scope.checked;
                  ctrl.$setViewValue(scope.checked);
                });
            });
		},
		template:'<lable class="btn label-sm {{checked ? \'active\':\'inactive\'}}" >{{checked ?trueText:falseText}}</lable>'  
	};
})

/**
 * 页面要引入
 * <%@include file="/commons/include/zTree.jsp"%>
 * <script type="text/javascript" src="${ctx}/js/common/customform/directiveTpl.js"></script>
 * 数据字典指令。
 * dictype：数据字典别名。
 */
.directive('htDic', function($injector){
	return {
		restrict: 'A',
		scope:{
			htDic:'='
    	},
    	template:'<div >\
    		<div ng-show="permission==\'w\' || permission==\'b\'" class="dropdown">\
			<span readonly="readonly" type="text" class="form-control ht-input" placeholder="点击选择" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">{{dicData.value?dicData.value:\'点击选择\'}}</span>\
					<div class="dropdown-menu" style=" width: 80%; margin-left: 11px;">\
						<ul id="{{treeId}}" class="ztree"></ul>\
					</div>\
			</div>\
			<div ng-show="permission==\'r\'">{{dicData.value}}</div>\
    		</div>',
		link: function(scope, element, attrs) { 
			element.removeClass();
			scope.permission ="b";
			var dicKey =attrs.dickey; //数据字典的类型
			var url=attrs.url|| __ctx +"/system/dataDict/getByTypeKeyForComBo?typeKey="+dicKey;
			var keyName =attrs.keyName||"key";
			var valName=attrs.valName||"text";
			
			scope.treeId = parseInt(Math.random()*1000)
			scope.dicData={};
        	scope.treeClick = function(event,treeId,treeNode){
        		
        		scope.dicData.key =treeNode[keyName];
        		scope.dicData.value =treeNode[valName];
        		scope.htDic =scope.dicData.key;
        		
        		!scope.$parent.$$phase &&scope.$parent.$digest();
        		
        		// 树隐藏
        		if(window.FORM_TYPE_!='mobile'){
        			$('#dropBody'+treeId).dropdown('close');
        		}else{
        			$.closeModal($('#popover'+treeId));
        		}
        	}
        	
        	scope.loadTree = function(){
        		var ztCreator = new ZtreeCreator(scope.treeId,url);
        		ztCreator.setDataKey({idKey:keyName,name:valName});
 				ztCreator.setCallback({onClick:scope.treeClick});
 				ztCreator.setChildKey();
 				if(window.FORM_TYPE_=='mobile'){
 					ztCreator.setOutLookStyle();
 				}
 				ztCreator.initZtree({},3,function(treeObj,treeId){
 					
 					//树列表的dropBody初始化
 					if(window.FORM_TYPE_!='mobile'){
 						$('#dropBody'+treeId).dropdown({justify: '#dropDown'+treeId});
 					}else{
 						$(".page").after($('#popover'+treeId));
 					}
 					
 					// 通过key 回显Value
 					if(scope.htDic){
 						//获取key 的那个Value
 						var node = treeObj.getNodesByFilter( function(node){ if(node[keyName]==scope.htDic) return true; else return false; },true);
 						if(node){
 							scope.dicData.key =node[keyName];
 			        		scope.dicData.value =node[valName];
 			        		!scope.$parent.$$phase&&scope.$parent.$digest();
						}
 					}
				});
        	};
         	scope.$watch("htDic",function(newVal,oldVal,scope){
	        		if(newVal !=oldVal){
	        			scope.render();
	        		}
	        	});
         	
        	scope.render = function(){
        		if(scope.htDic){
						//获取key 的那个Value
        			if(node == null){
							return;
						}
					var node = treeObject.getNodesByFilter( function(node){ if(node[keyName]==scope.htDic) return true; else return false; },true);
					if(node){
						scope.dicData.key =node[keyName];
		        		scope.dicData.value =node[valName];
		        		if(bind){
		        			var tmp='scope.$parent.$parent.'+bind+'="'+scope.dicData.value+'"';
		        			eval(tmp);
		        		}
		        		!$rootScope.$$phase && $rootScope.$digest();
					}
			}else{
				scope.dicData.key ="";
	        		scope.dicData.value ="";
			}
        	}
	        	
        	scope.loadTree();
		}
	};
})
/**
 * ht-checkboxs-dic
 * 数据字典指令复选框。
 * dictype：数据字典别名。
 */
.directive('htCheckboxsDic', ['$rootScope','baseService','filterFilter',function($rootScope,baseService,filter){
	return {
		restrict: 'A',
		scope:{
			htCheckboxsDic:'=',
			htValue:'=?htValue',
			htFilter:'=?htFilter',
			ngDisabled:'=?ngDisabled'
    	},
    	template:getDirectiveTplHtml("htCheckboxsDic"),
		link: function(scope, element, attrs) {
			element.removeClass();
			scope.permission =getPermission(attrs.permission,scope);
			if(scope.ngDisabled){
				scope.permission = 'r';
			} 
			var dicKey =attrs.dickey; //数据字典的类型
			var bind = attrs.bind;
			scope.dicData = {};
			var url=attrs.url|| __ctx +"/system/dataDict/getByTypeKeyForComBo?typeKey="+dicKey;
			var keyName =attrs.keyName||"key";
			var valName=attrs.valName||"text";
			scope.getDic = function(result){
				return baseService.get(url).then(function(data){
					var result = scope.htCheckboxsDic;
					var name  = dicKey+parseInt(Math.random()*1000);
					var list = result && result.split(',') || [];
					var resultList = []; 
					var dicDatafilter = angular.isFunction(scope.htFilter) ? scope.htFilter : function(dic){ return true;}
					var checkboxHtml = filter(data,dicDatafilter).map(function(dic){ 
						return  '<label class="checkbox-inline"><input type="checkbox" value="'+dic.key+'" name="'+name+'" >'+dic.text+'</label>'
					}).join('');
					scope.dicData.key = result;
	        		scope.dicData.value = resultList.join(','); 
	        		scope.htValue = scope.dicData.value; 
					$(element).find('.dropdown').append(checkboxHtml);
					scope.render();
				})
			}
			
			scope.getDic();
			$(element).on('change','[type="checkbox"]',function(event,data){
				var resultList =[];
				$(element).find('[type="checkbox"]').each(function(key,ele){
					var value = $(ele).val();
					if($(ele).prop('checked')){
						resultList.push(value);
					} 
				})
				scope.$parent.$eval(attrs.ngModel+'="'+ resultList.join(',')+'"');
				scope.$parent.$apply();
			})
			scope.render = function(){
				var result = scope.htCheckboxsDic;
				var resultList = result && result.split(',') || [];
				$(element).find('[type="checkbox"]').each(function(key,ele){
					var value = $(ele).val();
					$(ele).prop('checked',(filter(resultList,function(v){ return v == value;}).length>0))
				})
			}
			
			scope.$watch('htCheckboxsDic',function(newValue,oldValue){
				if(newValue && newValue!=oldValue){
					scope.render();
				}
			})
		}
	};
}])
/**
 * 数据字典指令。
 * dictype：数据字典别名。
 */
.directive('htRadiosDic', ['$rootScope','baseService','filterFilter',function($rootScope,baseService,filter){
	return {
		restrict: 'A',
		scope:{
			htRadiosDic:'=',
			htValue:'=?htValue',
			htFilter:'=?htFilter',
			ngDisabled:'=?ngDisabled'
    	},
    	template:getDirectiveTplHtml("htRadiosDic"),
		link: function(scope, element, attrs) {
			element.removeClass();
			scope.permission =getPermission(attrs.permission,scope);
			if(scope.ngDisabled){
				scope.permission = 'r';
			}
			var dicKey =attrs.dickey; //数据字典的类型
			var bind = attrs.bind;
			scope.dicData = {};
			
			var url=attrs.url|| __ctx +"/system/dataDict/getByTypeKeyForComBo?typeKey="+dicKey;
			var keyName =attrs.keyName||"key";
			var valName=attrs.valName||"text";
			scope.getDic = function(){
				return baseService.get(url).then(function(data){
					var name  = dicKey+parseInt(Math.random()*1000);
					var result = scope.htRadiosDic;
					var resultName = "";
					var dicDatafilter = angular.isFunction(scope.htFilter) ? scope.htFilter : function(dic){ return true;}
					var radioHtml = filter(data,dicDatafilter).map(function(dic){  
						return  '<label class="radio-inline"><input type="radio" value="'+dic.key+'" name="'+name+'" >'+dic.text+'</label>'
					}).join('');
					scope.dicData.key = result;
	        		scope.dicData.value = resultName; 
	        		scope.htValue = scope.dicData.value; 
					$(element).find('.dropdown').append(radioHtml)
					
					scope.render();
				})
			}
			
			scope.getDic(); 
			$(element).on('change','[type="radio"]',function(event){
				var value = $(this).val();
				scope.$parent.$eval(attrs.ngModel+'="'+ value+'"');
				scope.$parent.$apply();
			})
			scope.render = function(){ 
				var result = scope.htRadiosDic;
				$(element).find('[type="radio"]').each(function(key,ele){
					var value = $(ele).val();
					$(ele).prop('checked',result == value);
				})
			} 
			scope.$watch('htRadiosDic',function(newValue,oldValue){
				if(newValue && newValue!=oldValue){
					scope.render();
				}
			})
		 
		}
	};
}])
/**
 * 
 * <input ht-category="DIC" ng-model="editingField.option.dic" />
 */
.directive('htCategory',[function(){
	return {
		 restrict: 'A',
		 replace: true,
		 require: '^ngModel',
		 scope:{
			 htCategory:"@",
			 ngModel:"="
		 },
		 template: '<input class="easyui-combotree-me" />',
		 link:function(scope, element, attrs){
			 scope.$watch("ngModel",function(){
			 	var comboTree = $(element); 
				if(comboTree.length==0) return;
				if(comboTree.data("ready")){
					setValue(comboTree);
					return;
				}  
				comboTree.data("ready",true);
				comboTree.combotree({
					url:__ctx+'/system/sysType/getByGroupKey?groupKey='+scope.htCategory,
					onClick:function(node){
						scope.$apply(function(){
							scope.ngModel=node.typeKey;
		                });
					},
					onLoadSuccess:function(node,data){
						setValue(comboTree);
					}
				});
			 },true);
			 
			 function setValue(comboTree){
				 if(scope.ngModel){
					comboTree.eachComboNode(function(node){
						if(node.typeKey&&node.typeKey==scope.ngModel){
							comboTree.combotree('setValue',node.id);
							return false;
						}
						return true;
					});
				  }
			 }
				
			
		 }
	};
}])

/**
 * 数字转成中文大写。
 * 用法：
 * <input class="inputText" type="text" ng-model="jinge"   />
 * 
 * {{jinge | cnCapital}}
 */
.filter('cnCapital', function() { 
	return function(input) {
		if(!input) return "";
		return $.convertCurrency(input);
	}; 
}); 
;

function getPermission(permissionPath,scope){
    var permission = scope.permission||scope.$parent.permission||scope.$parent.$parent&&scope.$parent.$parent.permission || (scope.$parent.$parent && scope.$parent.$parent.$parent&&scope.$parent.$parent.$parent.permission);
    if(!permission||!permissionPath) return "w";
    try {
        var p = eval(permissionPath);
    } catch (e) {
        console.info("获取权限出现了异常 permissionPath:"+permissionPath)
        console.info(permission);
        console.info(e);
    }
    return p ||'w';
}

